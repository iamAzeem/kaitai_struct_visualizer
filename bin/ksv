#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

# Some additional magic to make it work right after repo checkout,
# without installation to proper Ruby library dirs

full_bin_path = File.realpath($PROGRAM_NAME)
dist_path = File.expand_path(File.dirname(full_bin_path) + '/..')

$LOAD_PATH << "#{dist_path}/lib"
$LOAD_PATH << "#{dist_path}/../runtime/ruby/lib"

require 'kaitai/struct/visualizer'

# ======================================================================

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} [options] <file_to_parse.bin> <format.ksy>...|<format.rb>"
  opts.separator ''

  opts.on('-I', '--import-path [DIRECTORIES]', '.ksy library search path(s) for imports (see also KSPATH env variable)') do |v|
    options[:import_path] = v
  end

  opts.on('--opaque-types [BOOLEAN]', 'opaque types allowed, default: false') do |v|
    options[:opaque_types] = v
  end

  opts.on('-r', '--require [PATH]', 'load ("require") .rb file into Ruby process') do |v|
    $LOAD_PATH << '.' unless $LOAD_PATH.include?('.')
    require v
  end

  opts.on('--version', 'show versions of ksv and ksc') do |_v|
    puts "kaitai-struct-visualizer #{Kaitai::Struct::Visualizer::VERSION}"
    system('ksc', '--version')
    exit 0
  end
end

begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  puts e
  puts parser
  exit 1
end

if ARGV.size < 2
  puts parser
  exit 1
end

c = Kaitai::Struct::Visualizer::KSYCompiler.new(options)
v = Kaitai::Struct::Visualizer::Visualizer.new(c, ARGV[0], ARGV[1..-1], options)
v.run
